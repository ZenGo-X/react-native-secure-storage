import groovy.json.JsonSlurper

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        // Matches the RN Hello World template
        // https://github.com/facebook/react-native/blob/1e8f3b11027fe0a7514b4fc97d0798d3c64bc895/local-cli/templates/HelloWorld/android/build.gradle#L8
        classpath 'com.android.tools.build:gradle:3.5.2'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }
    android {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
}

repositories {
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        // Matches the RN Hello World template
        // https://github.com/facebook/react-native/blob/1e8f3b11027fe0a7514b4fc97d0798d3c64bc895/local-cli/templates/HelloWorld/android/build.gradle#L21
        url "$projectDir/../node_modules/react-native/android"
    }
    maven { url "https://maven.google.com" }
    jcenter()
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
    implementation 'com.facebook.conceal:conceal:1.1.3@aar'
    implementation 'androidx.core:core:1.3.2@aar'
    implementation 'androidx.biometric:biometric:1.0.1'
}

def configureReactNativePom(def pom) {
    def packageJson = new JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "li.yunqi.rnsecurestorage"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

afterEvaluate { project ->

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        // Use compileClasspath for Javadoc
        classpath += files(project.configurations.getByName('compileClasspath').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact androidSourcesJar
                artifact androidJavadocJar
            }
        }

        repositories {
            maven {
                url = uri("file://${projectDir}/../android/maven")
            }
        }
    }
}